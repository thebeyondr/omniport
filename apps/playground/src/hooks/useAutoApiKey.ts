"use client";

import { useEffect } from "react";

import { useApiKey } from "@/hooks/useApiKey";
import { useDefaultProject } from "@/hooks/useDefaultProject";
import { useApi } from "@/lib/fetch-client";

/**
 * Hook that automatically fetches and sets API key for new users
 * who don't have one stored locally but have an auto-generated one on the server
 */
export function useAutoApiKey() {
	const api = useApi();
	const { data: defaultProject } = useDefaultProject();
	const { userApiKey, setUserApiKey, isLoaded } = useApiKey();

	// Fetch API keys from server for the default project
	const { data: apiKeysData, isLoading } = api.useQuery(
		"get",
		"/keys/api",
		{
			params: {
				query: { projectId: defaultProject?.id || "" },
			},
		},
		{
			enabled: !!defaultProject?.id && isLoaded && !userApiKey,
			staleTime: 5 * 60 * 1000, // 5 minutes
			refetchOnWindowFocus: false,
		},
	);

	useEffect(() => {
		// Auto-set API key for new users
		if (
			isLoaded && // localStorage is loaded
			!userApiKey && // no API key in localStorage
			!isLoading && // server data is loaded
			apiKeysData?.apiKeys && // we have API keys data
			apiKeysData.apiKeys.length > 0 // user has at least one API key
		) {
			// Find the auto-generated playground key or use the first active key
			const autoGeneratedKey = apiKeysData.apiKeys.find(
				(key) =>
					key.status === "active" &&
					key.description?.includes("Auto-generated playground key"),
			);

			const firstActiveKey = apiKeysData.apiKeys.find(
				(key) => key.status === "active",
			);

			const keyToUse = autoGeneratedKey || firstActiveKey;

			if (keyToUse?.maskedToken) {
				// We can't use the masked token directly, but we can indicate that the user has a key
				// For now, we'll still show the API key manager but with better messaging
				console.log("User has auto-generated API key available");
			}
		}
	}, [isLoaded, userApiKey, isLoading, apiKeysData, setUserApiKey]);

	return {
		hasAutoGeneratedKey:
			!isLoading &&
			apiKeysData?.apiKeys?.some(
				(key) =>
					key.status === "active" &&
					key.description?.includes("Auto-generated playground key"),
			),
		hasAnyKey:
			!isLoading &&
			apiKeysData?.apiKeys?.some((key) => key.status === "active"),
		isLoading,
	};
}
